
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w'
ADMIN_ID = 5206914915

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

USER_STATE = {}

# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
class AdminState(StatesGroup):
    waiting_for_city = State()
    waiting_for_category_city = State()
    waiting_for_category_name = State()
    waiting_for_product_city = State()
    waiting_for_product_category = State()
    waiting_for_product_data = State()

def load_data():
    with open("bot/data.json", "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open("bot/data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"))
    kb.add(KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"))
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
async def add_city_start(message: types.Message):
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")
    await AdminState.waiting_for_city.set()

@dp.message_handler(state=AdminState.waiting_for_city)
async def add_city_finish(message: types.Message, state: FSMContext):
    data = load_data()
    city = message.text
    if city not in data:
        data[city] = {}
        save_data(data)
        await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ '{city}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ –µ—Å—Ç—å.")
    await state.finish()

@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_city(message: types.Message):
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await AdminState.waiting_for_category_city.set()

@dp.message_handler(state=AdminState.waiting_for_category_city)
async def add_category_name(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await AdminState.waiting_for_category_name.set()

@dp.message_handler(state=AdminState.waiting_for_category_name)
async def add_category_finish(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    city = user_data['city']
    category = message.text
    data = load_data()
    if city in data:
        if category not in data[city]:
            data[city][category] = []
            save_data(data)
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{city}'.")
        else:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å.")
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç.")
    await state.finish()

@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: types.Message):
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:")
    await AdminState.waiting_for_product_city.set()

@dp.message_handler(state=AdminState.waiting_for_product_city)
async def add_product_category(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await AdminState.waiting_for_product_category.set()

@dp.message_handler(state=AdminState.waiting_for_product_category)
async def add_product_data(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("üõí –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –û–ø–∏—Å–∞–Ω–∏–µ")
    await AdminState.waiting_for_product_data.set()

@dp.message_handler(state=AdminState.waiting_for_product_data)
async def save_product(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        city = user_data['city']
        category = user_data['category']
        name, price, desc = [x.strip() for x in message.text.split("|")]
        product_id = str(hash(name + price) % 100000)
        data = load_data()
        if city in data and category in data[city]:
            data[city][category].append({
                "name": name,
                "price": price,
                "desc": desc,
                "product_id": product_id
            })
            save_data(data)
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    await state.finish()

@dp.message_handler(lambda msg: msg.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
async def show_all_data(message: types.Message):
    data = load_data()
    response = ""
    for city, cats in data.items():
        response += f"üèô {city}:
"
        for cat, products in cats.items():
            response += f"  üìÇ {cat}:
"
            for p in products:
                response += f"    - {p['name']} ({p['price']})
"
    await message.answer(response or "üì≠ –ü—É—Å—Ç–æ.")
