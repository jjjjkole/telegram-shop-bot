import asyncio
import logging
import os
import sqlite3

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
ADMIN_PASSWORD = "admin25"
DB_FILE = "shop.db"
PRODUCT_FILE = "101.txt"
PAYMENT_LINK = "https://visionary-hamster-5a495f.netlify.app/"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
dp = Dispatcher()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î ---
def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('PRAGMA foreign_keys = ON')
        cursor.execute("CREATE TABLE IF NOT EXISTS cities (id INTEGER PRIMARY KEY, name TEXT UNIQUE NOT NULL)")
        cursor.execute("CREATE TABLE IF NOT EXISTS categories (id INTEGER PRIMARY KEY, name TEXT NOT NULL, city_id INTEGER NOT NULL, FOREIGN KEY (city_id) REFERENCES cities(id) ON DELETE CASCADE)")
        cursor.execute("CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY, name TEXT NOT NULL, price INTEGER NOT NULL, category_id INTEGER NOT NULL, description TEXT, FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE)")
        
        cursor.execute("PRAGMA table_info(products)")
        columns = [column[1] for column in cursor.fetchall()]
        if 'description' not in columns:
            cursor.execute("ALTER TABLE products ADD COLUMN description TEXT")
        conn.commit()

# (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ë–î –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def db_query(query, params=(), fetchone=False, fetchall=False):
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('PRAGMA foreign_keys = ON')
        cursor.execute(query, params)
        conn.commit()
        if fetchone: return cursor.fetchone()
        if fetchall: return cursor.fetchall()

# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class AdminFSM(StatesGroup):
    add_city_name = State()
    add_category_select_city = State(); add_category_name = State()
    add_product_select_city = State(); add_product_select_category = State(); add_product_data = State(); add_product_description = State()

# --- (–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∞–¥–º–∏–Ω–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class AdminCallback(CallbackData, prefix="adm"):
    action: str; level: str | None = None
def get_main_admin_menu():
    return InlineKeyboardBuilder().add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_menu"), InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="delete_menu"), InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu")).adjust(3).as_markup()
def get_action_menu(action: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ì–æ—Ä–æ–¥", callback_data=AdminCallback(action=action, level='city').pack())
    builder.button(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=AdminCallback(action=action, level='category').pack())
    builder.button(text="–¢–æ–≤–∞—Ä", callback_data=AdminCallback(action=action, level='product').pack())
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_home"))
    return builder.as_markup()
def dynamic_keyboard(items: list, prefix: str):
    builder = InlineKeyboardBuilder()
    for item_id, name in items:
        builder.button(text=name, callback_data=f"{prefix}:{item_id}")
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_home"))
    return builder.as_markup()
@dp.message(Command(ADMIN_PASSWORD))
async def admin_entry(message: Message, state: FSMContext):
    await state.clear(); await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_main_admin_menu())
@dp.callback_query(F.data == "admin_home")
async def admin_home(callback: CallbackQuery, state: FSMContext):
    await state.clear(); await callback.message.edit_text("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_main_admin_menu())
@dp.callback_query(F.data.in_({'add_menu', 'delete_menu', 'edit_menu'}))
async def admin_action_menu(callback: CallbackQuery, callback_data: AdminCallback):
    action = callback.data.split('_')[0]
    text = {"add": "–¥–æ–±–∞–≤–∏—Ç—å", "delete": "—É–¥–∞–ª–∏—Ç—å", "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"}
    await callback.message.edit_text(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ {text.get(action)}?", reply_markup=get_action_menu(action))
@dp.callback_query(AdminCallback.filter(F.action == "add"))
async def add_start(callback: CallbackQuery, state: FSMContext, callback_data: AdminCallback):
    level = callback_data.level
    if level == "city": await state.set_state(AdminFSM.add_city_name); await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    elif level == "category":
        cities = db_query("SELECT id, name FROM cities", fetchall=True)
        if not cities: return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥!", show_alert=True)
        await state.set_state(AdminFSM.add_category_select_city); await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=dynamic_keyboard(cities, "add_cat_city"))
    elif level == "product":
        cities = db_query("SELECT id, name FROM cities", fetchall=True)
        if not cities: return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥!", show_alert=True)
        await state.set_state(AdminFSM.add_product_select_city); await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=dynamic_keyboard(cities, "add_prod_city"))
@dp.message(AdminFSM.add_city_name)
async def add_city_finish(message: Message, state: FSMContext):
    db_query("INSERT INTO cities (name) VALUES (?)", (message.text,)); await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_main_admin_menu()); await state.clear()
@dp.callback_query(F.data.startswith("add_cat_city:"))
async def add_category_city_selected(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split(':')[1]); await state.update_data(city_id=city_id); await state.set_state(AdminFSM.add_category_name); await callback.message.edit_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
@dp.message(AdminFSM.add_category_name)
async def add_category_finish(message: Message, state: FSMContext):
    user_data = await state.get_data(); db_query("INSERT INTO categories (name, city_id) VALUES (?,?)", (message.text, user_data['city_id'])); await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=get_main_admin_menu()); await state.clear()
@dp.callback_query(F.data.startswith("add_prod_city:"))
async def add_product_city_selected(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split(':')[1]); categories = db_query("SELECT id, name FROM categories WHERE city_id=?", (city_id,), fetchall=True)
    if not categories: return await callback.message.edit_text("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ.", reply_markup=get_main_admin_menu())
    await state.update_data(city_id=city_id); await state.set_state(AdminFSM.add_product_select_category); await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=dynamic_keyboard(categories, "add_prod_cat"))
@dp.callback_query(F.data.startswith("add_prod_cat:"))
async def add_product_category_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(category_id=int(callback.data.split(':')[1])); await state.set_state(AdminFSM.add_product_data); await callback.message.edit_text("üõí –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")
@dp.message(AdminFSM.add_product_data)
async def fsm_get_product_data(message: Message, state: FSMContext):
    try: name, price_str = message.text.split(' - '); price = int(price_str)
    except (ValueError, TypeError): return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.update_data(name=name, price=price); await state.set_state(AdminFSM.add_product_description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞. –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ '-'.")
@dp.message(AdminFSM.add_product_description)
async def fsm_add_product_description(message: Message, state: FSMContext):
    user_data = await state.get_data(); name, price = user_data['name'], user_data['price']
    description = None if message.text.strip() == '-' else message.text
    db_query("INSERT INTO products (name, price, category_id, description) VALUES (?,?,?,?)", (name, price, user_data['category_id'], description))
    await message.answer(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=get_main_admin_menu()); await state.clear()


# --- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–õ–ò–ï–ù–¢–°–ö–û–ô –ß–ê–°–¢–ò ---

# 1. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(CommandStart())
async def client_start_debug(message: Message):
    await message.answer("DEBUG: /start command was caught!")

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫-–ª–æ–≤—É—à–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def message_trap(message: Message):
    await message.answer(f"DEBUG: Caught an unhandled message with text: '{message.text}'")


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    # init_db() # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ë–î, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç—Ç—É–¥–∞
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –í–ï–†–°–ò–Ø)..."); asyncio.run(main())
