import asyncio
import json
import logging
import os
from contextlib import suppress

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –Ω–∞ Railway —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞
    print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    exit()

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"
PRODUCT_FILE = "101.txt"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —É—Ç–∏–ª–∏—Ç—ã ---
ADMIN_PASSWORD = "admin25"
PAYMENT_LINK = "https://example.com/payment_landing" # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–£ –°–°–´–õ–ö–£

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ Railway
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON —Ñ–∞–π–ª–æ–º
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            if not content:
                return {}
            return json.loads(content)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ data.json: {e}")
        return {}

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª."""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ data.json: {e}")


# --- FSM (–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π) –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
class AdminState(StatesGroup):
    menu = State()
    add_city_name = State()
    add_category_select_city = State()
    add_category_name = State()
    add_product_select_city = State()
    add_product_select_category = State()
    add_product_data = State()
    delete_city_select = State()
    delete_category_select_city = State()
    delete_category_select = State()
    delete_product_select_city = State()
    delete_product_select_category = State()
    delete_product_select = State()

# --- –§–∞–±—Ä–∏–∫–∞ CallbackData ---
class NavCallback(types.CallbackData, prefix="nav"):
    action: str
    level: str
    city: str | None = None
    category: str | None = None
    product: str | None = None

# --- –†–æ—É—Ç–µ—Ä—ã ---
dp = Dispatcher()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_admin_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=NavCallback(action='add_start', level='city').pack())
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=NavCallback(action='delete_start', level='city').pack())
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=NavCallback(action='add_start', level='category').pack())
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=NavCallback(action='delete_start', level='category').pack())
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=NavCallback(action='add_start', level='product').pack())
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=NavCallback(action='delete_start', level='product').pack())
    builder.button(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="exit_admin")
    builder.adjust(2)
    return builder.as_markup()

def build_dynamic_keyboard(action: str, level: str, data_dict: dict, parent_data: dict = None):
    builder = InlineKeyboardBuilder()
    parent_data = parent_data or {}

    for item_name, item_value in data_dict.items():
        callback_payload = parent_data.copy()
        callback_payload['level'] = level
        callback_payload['action'] = action
        display_text = item_name

        if level == 'city': callback_payload['city'] = item_name
        elif level == 'category': callback_payload['category'] = item_name
        elif level == 'product':
            callback_payload['product'] = item_name
            display_text = f"{item_name} ‚Äî {item_value}‚ÇΩ"

        builder.button(text=display_text, callback_data=NavCallback(**callback_payload).pack())

    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–ù–∞–∑–∞–¥" –∏ "–í –º–µ–Ω—é"
    nav_buttons = []
    if level != 'city':
        back_payload = parent_data.copy()
        if 'category' in parent_data:
            back_payload['level'] = 'category'
            del back_payload['category']
        elif 'city' in parent_data:
            back_payload['level'] = 'city'
            del back_payload['city']

        if 'action' in parent_data and parent_data['action'].startswith('delete'):
             back_payload['action'] = 'delete_start'
        else:
             back_payload['action'] = 'select'
        
        # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—É–ø–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è
        if action == 'delete' and level == 'category': back_payload['level'] = 'city'
        if action == 'delete' and level == 'product': back_payload['level'] = 'category'
        
        if back_payload.get('level'):
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=NavCallback(**back_payload).pack()))

    if action.startswith(('add', 'delete')):
         nav_buttons.append(InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_main_menu"))
    
    if nav_buttons:
        builder.row(*nav_buttons)

    return builder.as_markup()


async def edit_or_send_message(target: Message | CallbackQuery, text: str, markup: InlineKeyboardMarkup):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫."""
    if isinstance(target, CallbackQuery):
        with suppress(TelegramBadRequest):
            await target.message.edit_text(text, reply_markup=markup)
            await target.answer()
    else:
        await target.answer(text, reply_markup=markup)

# --- –ê–¥–º–∏–Ω-—Ö–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command(ADMIN_PASSWORD))
async def admin_login(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîë –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=get_admin_menu_keyboard())

@dp.callback_query(F.data.in_(["admin_main_menu", "exit_admin"]))
async def handle_admin_nav(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    text = "üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:" if callback.data == "admin_main_menu" else "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
    markup = get_admin_menu_keyboard() if callback.data == "admin_main_menu" else None
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

# --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
@dp.callback_query(NavCallback.filter(F.action == 'add_start'))
async def start_add_item(callback: CallbackQuery, state: FSMContext, callback_data: NavCallback):
    level = callback_data.level
    data = load_data()
    if level == 'city':
        await state.set_state(AdminState.add_city_name)
        await edit_or_send_message(callback, "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", None)
    elif level == 'category':
        if not data: return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥!", show_alert=True)
        await state.set_state(AdminState.add_category_select_city)
        await edit_or_send_message(callback, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", build_dynamic_keyboard('select', 'city', data, {'action':'add_start'}))
    elif level == 'product':
        if not any(data.values()): return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
        await state.set_state(AdminState.add_product_select_city)
        await edit_or_send_message(callback, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", build_dynamic_keyboard('select', 'city', data, {'action':'add_start'}))

# –®–∞–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞)
@dp.message(AdminState.add_city_name)
async def process_add_city(message: Message, state: FSMContext):
    city_name = message.text.strip()
    data = load_data()
    if city_name not in data:
        data[city_name] = {}
        save_data(data)
        await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ '{city_name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ '{city_name}' —É–∂–µ –µ—Å—Ç—å.")
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())

@dp.callback_query(AdminState.add_category_select_city)
async def select_city_for_category(callback: CallbackQuery, state: FSMContext, callback_data: NavCallback):
    await state.update_data(city=callback_data.city)
    await state.set_state(AdminState.add_category_name)
    await edit_or_send_message(callback, "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", None)

@dp.message(AdminState.add_category_name)
async def process_add_category(message: Message, state: FSMContext):
    category_name = message.text.strip()
    user_data = await state.get_data(); city = user_data['city']
    data = load_data()
    if category_name not in data[city]:
        data[city][category_name] = {}; save_data(data)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await message.answer(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ –µ—Å—Ç—å.")
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
    
@dp.callback_query(AdminState.add_product_select_city)
async def select_city_for_product(callback: CallbackQuery, state: FSMContext, callback_data: NavCallback):
    city = callback_data.city
    await state.update_data(city=city)
    await state.set_state(AdminState.add_product_select_category)
    data = load_data()
    await edit_or_send_message(callback, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", build_dynamic_keyboard('select', 'category', data[city], {'city': city, 'action':'add_start'}))

@dp.callback_query(AdminState.add_product_select_category)
async def select_category_for_product(callback: CallbackQuery, state: FSMContext, callback_data: NavCallback):
    await state.update_data(category=callback_data.category)
    await state.set_state(AdminState.add_product_data)
    await edit_or_send_message(callback, "üõí –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞", None)

@dp.message(AdminState.add_product_data)
async def process_add_product(message: Message, state: FSMContext):
    try:
        product_name, price_str = message.text.strip().split(' - ')
        price = int(price_str)
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Netflix - 200).")
        return
    user_data = await state.get_data()
    city, category = user_data['city'], user_data['category']
    data = load_data()
    data[city][category][product_name] = price
    save_data(data)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())

# --- –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ---
@dp.callback_query(NavCallback.filter(F.action == 'delete_start'))
async def start_delete_item(callback: CallbackQuery, callback_data: NavCallback):
    level = callback_data.level
    data = load_data()
    if level == 'city':
        if not data: return await callback.answer("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å!", show_alert=True)
        await edit_or_send_message(callback, "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", build_dynamic_keyboard('delete', 'city', data))
    elif level == 'category':
        if not data: return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥!", show_alert=True)
        await edit_or_send_message(callback, "üóëÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", build_dynamic_keyboard('delete', 'city', data, {'action':'delete_start'}))
    elif level == 'product':
        if not any(data.values()): return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
        await edit_or_send_message(callback, "üóëÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", build_dynamic_keyboard('delete', 'city', data, {'action':'delete_start'}))

@dp.callback_query(NavCallback.filter(F.action == 'delete'))
async def process_delete_item(callback: CallbackQuery, callback_data: NavCallback):
    data = load_data()
    city, category, product = callback_data.city, callback_data.category, callback_data.product
    
    if callback_data.level == 'city':
        del data[city]
        msg = f"–ì–æ—Ä–æ–¥ '{city}' —É–¥–∞–ª–µ–Ω."
    elif callback_data.level == 'category':
        del data[city][category]
        msg = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞."
    elif callback_data.level == 'product':
        del data[city][category][product]
        msg = f"–¢–æ–≤–∞—Ä '{product}' —É–¥–∞–ª–µ–Ω."
    
    save_data(data)
    await callback.answer(msg, show_alert=True)
    await callback.message.edit_text("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())


# --- –ö–ª–∏–µ–Ω—Ç-—Ö–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    await state.clear()
    data = load_data()
    if not data:
        return await message.answer("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –ø—É—Å—Ç.")
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=build_dynamic_keyboard('select', 'city', data))

@dp.callback_query(NavCallback.filter(F.action == 'select'))
async def navigate_client_menu(callback: CallbackQuery, callback_data: NavCallback):
    data = load_data()
    city, category = callback_data.city, callback_data.category

    if callback_data.level == 'city':
        await edit_or_send_message(callback, f"üìç –ì–æ—Ä–æ–¥: {city}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", build_dynamic_keyboard('select', 'category', data[city], {'city': city}))
    elif callback_data.level == 'category':
        await edit_or_send_message(callback, f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", build_dynamic_keyboard('select', 'product', data[city][category], {'city': city, 'category': category}))
    elif callback_data.level == 'product':
        price = data.get(city, {}).get(category, {}).get(callback_data.product)
        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=PAYMENT_LINK)
        builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=NavCallback(action='paid', level='final').pack())
        await edit_or_send_message(callback,
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {callback_data.product} ‚Äî {price}‚ÇΩ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', –∞ –ø–æ—Å–ª–µ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.",
            builder.as_markup()
        )

@dp.callback_query(NavCallback.filter(F.action == 'paid'))
async def check_payment(callback: CallbackQuery):
    await callback.message.edit_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É...")
    await asyncio.sleep(2)
    try:
        with open(PRODUCT_FILE, 'r', encoding='utf-8') as f:
            product_data = f.read()
        await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–æ–≤–∞—Ä:")
        await callback.message.answer(product_data)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª —Ç–æ–≤–∞—Ä–∞ {PRODUCT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.run(main())
