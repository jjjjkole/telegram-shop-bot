import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, ReplyKeyboardRemove
import json
import os

BOT_TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
ADMIN_IDS = [5206914915]
ADMIN_PASSWORD = "admin25"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

data_file = "data.json"
orders_file = "orders.txt"

def load_data():
    if os.path.exists(data_file):
        with open(data_file, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"cities": {}, "admins": []}

def save_data(data):
    with open(data_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"), KeyboardButton(text="üìç –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥")],
            [KeyboardButton(text="üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), KeyboardButton(text="üìÇ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥")]
        ],
        resize_keyboard=True
    )

def get_main_keyboard(is_admin=False):
    keyboard = [[KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥")]]
    if is_admin:
        keyboard.append([
            KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"),
            KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
        ])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@dp.message()
async def handle_message(message: Message):
    text = message.text.strip()
    data = load_data()
    is_admin = message.from_user.id in data.get("admins", []) or message.from_user.id in ADMIN_IDS

    if text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard(is_admin=is_admin))

    elif text == "/admin":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:")

    elif text == ADMIN_PASSWORD:
        if message.from_user.id not in data["admins"]:
            data["admins"].append(message.from_user.id)
            save_data(data)
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω–∫—É –ø–æ–ª—É—á–µ–Ω.", reply_markup=get_admin_keyboard())

    elif is_admin and text == "üìç –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add_city –ì–æ—Ä–æ–¥")

    elif is_admin and text.startswith("/add_city "):
        city = text.replace("/add_city ", "").strip()
        if city:
            data["cities"].setdefault(city, {})
            save_data(data)
            await message.answer(f"–ì–æ—Ä–æ–¥ '{city}' –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")

    elif is_admin and text == "üìç –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /del_city –ì–æ—Ä–æ–¥")

    elif is_admin and text.startswith("/del_city "):
        city = text.replace("/del_city ", "").strip()
        if city in data["cities"]:
            del data["cities"][city]
            save_data(data)
            await message.answer(f"–ì–æ—Ä–æ–¥ '{city}' —É–¥–∞–ª–µ–Ω ‚úÖ")
        else:
            await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")

    elif is_admin and text == "üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add_cat –ì–æ—Ä–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    elif is_admin and text.startswith("/add_cat "):
        try:
            _, city, category = text.split(maxsplit=2)
            data["cities"].setdefault(city, {}).setdefault(category, [])
            save_data(data)
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–æ—Ä–æ–¥ '{city}' ‚úÖ")
        except:
            await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç: /add_cat –ì–æ—Ä–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    elif is_admin and text == "üìÇ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /del_cat –ì–æ—Ä–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    elif is_admin and text.startswith("/del_cat "):
        try:
            _, city, category = text.split(maxsplit=2)
            if city in data["cities"] and category in data["cities"][city]:
                del data["cities"][city][category]
                save_data(data)
                await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ '{city}' ‚úÖ")
            else:
                await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")
        except:
            await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç: /del_cat –ì–æ—Ä–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    elif is_admin and text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add_item –ì–æ—Ä–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¢–æ–≤–∞—Ä")

    elif is_admin and text.startswith("/add_item "):
        try:
            _, city, category, item = text.split(maxsplit=3)
            data["cities"].setdefault(city, {}).setdefault(category, []).append(item)
            save_data(data)
            await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
        except:
            await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç: /add_item –ì–æ—Ä–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¢–æ–≤–∞—Ä")

    elif is_admin and text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /del_item –ì–æ—Ä–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¢–æ–≤–∞—Ä")

    elif is_admin and text.startswith("/del_item "):
        try:
            _, city, category, item = text.split(maxsplit=3)
            if item in data["cities"].get(city, {}).get(category, []):
                data["cities"][city][category].remove(item)
                save_data(data)
                await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
            else:
                await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
        except:
            await message.answer("–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç: /del_item –ì–æ—Ä–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¢–æ–≤–∞—Ä")

    elif text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥":
        content = "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:
"
        for city, categories in data["cities"].items():
            content += f"
üèôÔ∏è {city}:
"
            for cat, items in categories.items():
                content += f"  üìÇ {cat}:
"
                for item in items:
                    content += f"    ‚îî {item}
"
        await message.answer(content or "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")

    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    data = load_data()
    is_admin = user_id in ADMIN_IDS

    if text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard(is_admin=is_admin))
    elif text == "/admin":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:")
        return

    elif text == "admin25":
        if user_id not in ADMIN_IDS:
            ADMIN_IDS.append(user_id)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É ‚úÖ", reply_markup=get_admin_keyboard())
        return

    elif text == "üìç –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥" and is_admin:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return

    elif text == "üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" and is_admin:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        return

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" and is_admin:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")
        return

    elif "-" in text and is_admin:
        parts = text.split("-")
        if len(parts) == 2:
            name = parts[0].strip()
            price = parts[1].strip()
            if "products" not in data:
                data["products"] = []
            data["products"].append({"name": name, "price": price})
            save_data(data)
            await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
        return

    elif text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥":
        if "products" not in data or not data["products"]:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        else:
            content = "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:
"
            for item in data["products"]:
                content += f"- {item['name']} ({item['price']}‚ÇΩ)
"
            await message.answer(content)
        return

    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.")

