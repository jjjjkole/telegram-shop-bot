import asyncio
import json
import logging
import os
from contextlib import suppress

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
ADMIN_PASSWORD = "admin25"
DATA_FILE = "data.json"
PRODUCT_FILE = "101.txt"
PAYMENT_LINK = "https://visionary-hamster-5a495f.netlify.app/"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
dp = Dispatcher()

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def load_data():
    if not os.path.exists(DATA_FILE): return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f: return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError): return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f: json.dump(data, f, ensure_ascii=False, indent=4)

# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class AdminFSM(StatesGroup):
    add_city = State(); add_category_city = State(); add_category_name = State()
    add_product_city = State(); add_product_category = State(); add_product_data = State()
    delete_city = State(); delete_category_city = State(); delete_category_name = State()
    delete_product_city = State(); delete_product_category = State(); delete_product_name = State()
    edit_city_select = State(); edit_city_new_name = State()
    edit_category_select_city = State(); edit_category_select_name = State(); edit_category_new_name = State()
    edit_product_select_city = State(); edit_product_select_category = State(); edit_product_select_name = State(); edit_product_new_data = State()

# --- CallbackData ---
class AdminCallback(CallbackData, prefix="admin"):
    action: str

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_admin_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=AdminCallback(action="add_menu").pack())
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data=AdminCallback(action="delete_menu").pack())
    builder.button(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=AdminCallback(action="edit_menu").pack())
    builder.adjust(3)
    return builder.as_markup()

def get_action_menu(action_type: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ì–æ—Ä–æ–¥", callback_data=AdminCallback(action=f"{action_type}_city").pack())
    builder.button(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=AdminCallback(action=f"{action_type}_category").pack())
    builder.button(text="–¢–æ–≤–∞—Ä", callback_data=AdminCallback(action=f"{action_type}_product").pack())
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_home"))
    return builder.as_markup()

def dynamic_keyboard(items: list):
    builder = InlineKeyboardBuilder()
    for item in items: builder.button(text=str(item), callback_data=str(item))
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_home"))
    return builder.as_markup()

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.message(Command(ADMIN_PASSWORD))
async def admin_entry(message: Message, state: FSMContext):
    await state.clear(); await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=get_admin_menu())

@dp.callback_query(F.data == "admin_home")
async def admin_home(callback: CallbackQuery, state: FSMContext):
    await state.clear(); await callback.message.edit_text("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=get_admin_menu())

@dp.callback_query(AdminCallback.filter(F.action.endswith("_menu")))
async def admin_action_menu(callback: CallbackQuery, callback_data: AdminCallback):
    action_type = callback_data.action.split('_')[0]
    action_text = {"add": "–¥–æ–±–∞–≤–∏—Ç—å", "delete": "—É–¥–∞–ª–∏—Ç—å", "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"}
    await callback.message.edit_text(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ {action_text.get(action_type, '')}?", reply_markup=get_action_menu(action_type))

# --- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ---
@dp.callback_query(AdminCallback.filter(F.action.startswith(("add_", "delete_", "edit_"))))
async def handle_action_start(callback: CallbackQuery, state: FSMContext, callback_data: AdminCallback):
    action, item_type = callback_data.action.split('_')
    data = load_data()
    if not data and action != "add_city": return await callback.answer("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç!", show_alert=True)
    
    state_map = {
        ("add", "city"): (AdminFSM.add_city, "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"),
        ("add", "category"): (AdminFSM.add_category_city, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"),
        ("add", "product"): (AdminFSM.add_product_city, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"),
        ("delete", "city"): (AdminFSM.delete_city, "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"),
        ("delete", "category"): (AdminFSM.delete_category_city, "üóëÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"),
        ("delete", "product"): (AdminFSM.delete_product_city, "üóëÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"),
        ("edit", "city"): (AdminFSM.edit_city_select, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"),
        ("edit", "category"): (AdminFSM.edit_category_select_city, "üìù –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"),
        ("edit", "product"): (AdminFSM.edit_product_select_city, "üìù –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    }
    
    current_state, text = state_map.get((action, item_type))
    await state.set_state(current_state)
    
    markup = None
    if text.startswith(("–í—ã–±–µ—Ä–∏—Ç–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è")):
        markup = dynamic_keyboard(list(data.keys()))
    
    await callback.message.edit_text(text, reply_markup=markup)


# --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
@dp.message(AdminFSM.add_city)
async def add_city_finish(message: Message, state: FSMContext):
    data = load_data(); data[message.text] = {}; save_data(data)
    await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_admin_menu())
    await state.clear()

@dp.callback_query(AdminFSM.add_category_city)
async def add_category_city_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(city=callback.data); await state.set_state(AdminFSM.add_category_name)
    await callback.message.edit_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@dp.message(AdminFSM.add_category_name)
async def add_category_finish(message: Message, state: FSMContext):
    user_data = await state.get_data(); city = user_data['city']
    data = load_data(); data[city][message.text] = {}; save_data(data)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{city}'.", reply_markup=get_admin_menu())
    await state.clear()

@dp.callback_query(AdminFSM.add_product_city)
async def add_product_city_selected(callback: CallbackQuery, state: FSMContext):
    city = callback.data; data = load_data()
    if not data[city]: return await callback.message.edit_text("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ.", reply_markup=get_admin_menu())
    await state.update_data(city=city); await state.set_state(AdminFSM.add_product_category)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=dynamic_keyboard(list(data[city].keys())))

@dp.callback_query(AdminFSM.add_product_category)
async def add_product_category_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(category=callback.data); await state.set_state(AdminFSM.add_product_data)
    await callback.message.edit_text("üõí –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")

@dp.message(AdminFSM.add_product_data)
async def add_product_finish(message: Message, state: FSMContext):
    try: name, price_str = message.text.split(' - '); price = int(price_str)
    except (ValueError, TypeError): return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Netflix - 200).")
    user_data = await state.get_data(); city, category = user_data['city'], user_data['category']
    data = load_data(); data[city][category][name] = price; save_data(data)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_admin_menu())
    await state.clear()


# --- –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ---
@dp.callback_query(AdminFSM.delete_city)
async def delete_city_finish(callback: CallbackQuery, state: FSMContext):
    city = callback.data; data = load_data(); del data[city]; save_data(data)
    await callback.message.edit_text(f"‚úÖ –ì–æ—Ä–æ–¥ '{city}' —É–¥–∞–ª–µ–Ω.", reply_markup=get_admin_menu())
    await state.clear()

@dp.callback_query(AdminFSM.delete_category_city)
async def delete_category_city_selected(callback: CallbackQuery, state: FSMContext):
    city = callback.data; data = load_data()
    if not data[city]: return await callback.message.edit_text("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π!", reply_markup=get_admin_menu())
    await state.update_data(city=city); await state.set_state(AdminFSM.delete_category_name)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=dynamic_keyboard(list(data[city].keys())))

@dp.callback_query(AdminFSM.delete_category_name)
async def delete_category_finish(callback: CallbackQuery, state: FSMContext):
    category = callback.data; user_data = await state.get_data(); city = user_data['city']
    data = load_data(); del data[city][category]; save_data(data)
    await callback.message.edit_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_admin_menu())
    await state.clear()

@dp.callback_query(AdminFSM.delete_product_city)
async def delete_product_city_selected(callback: CallbackQuery, state: FSMContext):
    city = callback.data; data = load_data()
    if not data[city]: return await callback.message.edit_text("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π!", reply_markup=get_admin_menu())
    await state.update_data(city=city); await state.set_state(AdminFSM.delete_product_category)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=dynamic_keyboard(list(data[city].keys())))

@dp.callback_query(AdminFSM.delete_product_category)
async def delete_product_category_selected(callback: CallbackQuery, state: FSMContext):
    category = callback.data; user_data = await state.get_data(); city = user_data['city']; data = load_data()
    if not data[city][category]: return await callback.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!", reply_markup=get_admin_menu())
    await state.update_data(category=category); await state.set_state(AdminFSM.delete_product_name)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=dynamic_keyboard(list(data[city][category].keys())))

@dp.callback_query(AdminFSM.delete_product_name)
async def delete_product_finish(callback: CallbackQuery, state: FSMContext):
    product = callback.data; user_data = await state.get_data(); city, category = user_data['city'], user_data['category']
    data = load_data(); del data[city][category][product]; save_data(data)
    await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä '{product}' —É–¥–∞–ª–µ–Ω.", reply_markup=get_admin_menu())
    await state.clear()
    

# --- –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
@dp.callback_query(AdminFSM.edit_city_select)
async def edit_city_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(old_city_name=callback.data); await state.set_state(AdminFSM.edit_city_new_name)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{callback.data}':")

@dp.message(AdminFSM.edit_city_new_name)
async def edit_city_finish(message: Message, state: FSMContext):
    user_data = await state.get_data(); old_name = user_data['old_city_name']; new_name = message.text
    data = load_data(); data[new_name] = data.pop(old_name); save_data(data)
    await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'.", reply_markup=get_admin_menu())
    await state.clear()

@dp.callback_query(AdminFSM.edit_category_select_city)
async def edit_category_city_selected(callback: CallbackQuery, state: FSMContext):
    city = callback.data; data = load_data()
    if not data.get(city): return await callback.message.edit_text("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π!", reply_markup=get_admin_menu())
    await state.update_data(city=city); await state.set_state(AdminFSM.edit_category_select_name)
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ '{city}':", reply_markup=dynamic_keyboard(list(data[city].keys())))

@dp.callback_query(AdminFSM.edit_category_select_name)
async def edit_category_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(old_category_name=callback.data); await state.set_state(AdminFSM.edit_category_new_name)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{callback.data}':")

@dp.message(AdminFSM.edit_category_new_name)
async def edit_category_finish(message: Message, state: FSMContext):
    user_data = await state.get_data(); city, old_name = user_data['city'], user_data['old_category_name']; new_name = message.text
    data = load_data(); data[city][new_name] = data[city].pop(old_name); save_data(data)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'.", reply_markup=get_admin_menu())
    await state.clear()

@dp.callback_query(AdminFSM.edit_product_select_city)
async def edit_product_city_selected(callback: CallbackQuery, state: FSMContext):
    city = callback.data; data = load_data()
    if not data.get(city): return await callback.message.edit_text("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π!", reply_markup=get_admin_menu())
    await state.update_data(city=city); await state.set_state(AdminFSM.edit_product_select_category)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=dynamic_keyboard(list(data[city].keys())))

@dp.callback_query(AdminFSM.edit_product_select_category)
async def edit_product_category_selected(callback: CallbackQuery, state: FSMContext):
    category = callback.data; user_data = await state.get_data(); city = user_data['city']; data = load_data()
    if not data.get(city, {}).get(category): return await callback.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!", reply_markup=get_admin_menu())
    await state.update_data(category=category); await state.set_state(AdminFSM.edit_product_select_name)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=dynamic_keyboard(list(data[city][category].keys())))

@dp.callback_query(AdminFSM.edit_product_select_name)
async def edit_product_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(old_product_name=callback.data); await state.set_state(AdminFSM.edit_product_new_data)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{callback.data}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")

@dp.message(AdminFSM.edit_product_new_data)
async def edit_product_finish(message: Message, state: FSMContext):
    user_data = await state.get_data(); city, category, old_name = user_data['city'], user_data['category'], user_data['old_product_name']
    try: new_name, price_str = message.text.split(' - '); new_price = int(price_str)
    except (ValueError, TypeError): return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Netflix - 200).")
    data = load_data(); 
    if old_name in data[city][category]: del data[city][category][old_name]
    data[city][category][new_name] = new_price; save_data(data)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{old_name}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_name}' —Å —Ü–µ–Ω–æ–π {new_price}‚ÇΩ.", reply_markup=get_admin_menu())
    await state.clear()


# --- –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å ---
class ClientCallback(CallbackData, prefix="client"):
    level: str; city: str | None = None; category: str | None = None; product: str | None = None

def client_keyboard(level: str, items_data, context: dict = None):
    builder = InlineKeyboardBuilder(); context = context or {}; items = items_data.keys()
    for item in items:
        display_text = item
        if level == 'product': display_text = f"{item} ‚Äî {items_data[item]}‚ÇΩ"
        cb_data = context.copy(); cb_data.update({'level': level, 'product' if level == 'product' else level: item})
        builder.button(text=display_text, callback_data=ClientCallback(**cb_data).pack())
    builder.adjust(1)
    if level == 'category': builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≥–æ—Ä–æ–¥–∞–º", callback_data=ClientCallback(level='root').pack()))
    if level == 'product': builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=ClientCallback(level='city', city=context['city']).pack()))
    return builder.as_markup()

@dp.message(CommandStart())
async def client_start(message: Message):
    data = load_data();
    if not data: return await message.answer("–ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –ø—É—Å—Ç.")
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=client_keyboard('city', data))

@dp.callback_query(ClientCallback.filter())
async def client_nav(callback: CallbackQuery, callback_data: ClientCallback):
    data = load_data()
    level, city, category, product = callback_data.level, callback_data.city, callback_data.category, callback_data.product
    if level == 'root': await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=client_keyboard('city', data))
    elif level == 'city': await callback.message.edit_text(f"üìç –ì–æ—Ä–æ–¥: {city}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=client_keyboard('category', data[city], {'city': city}))
    elif level == 'category': await callback.message.edit_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=client_keyboard('product', data[city][category], {'city': city, 'category': category}))
    elif level == 'product':
        price = data[city][category][product]; builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=PAYMENT_LINK); builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_final")
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product} ‚Äî {price}‚ÇΩ\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "paid_final")
async def client_paid(callback: CallbackQuery):
    try:
        with open(PRODUCT_FILE, 'r', encoding='utf-8') as f: product_data = f.read()
        await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–æ–≤–∞—Ä:"); await callback.message.answer(product_data)
    except FileNotFoundError: await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞.")
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (v. —Å –ø–æ–ª–Ω—ã–º CRUD)...")
    asyncio.run(main())
