import asyncio
import json
import logging
import os
from contextlib import suppress

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
ADMIN_PASSWORD = "admin25"
DATA_FILE = "data.json"
PRODUCT_FILE = "101.txt"
PAYMENT_LINK = "https://example.com/payment_landing"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
dp = Dispatcher()

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def load_data():
    if not os.path.exists(DATA_FILE): return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f: return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError): return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f: json.dump(data, f, ensure_ascii=False, indent=4)

# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class AdminFSM(StatesGroup):
    add_city = State()
    add_category_city = State()
    add_category_name = State()
    add_product_city = State()
    add_product_category = State()
    add_product_data = State()

# --- CallbackData ---
class AdminCallback(CallbackData, prefix="admin"):
    action: str # add_city, add_category, add_product, delete_city, etc.
    city: str | None = None
    category: str | None = None

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_admin_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=AdminCallback(action="add_menu").pack())
    # builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data=AdminCallback(action="delete_menu").pack())
    return builder.as_markup()

def get_add_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ì–æ—Ä–æ–¥", callback_data=AdminCallback(action="add_city").pack())
    builder.button(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=AdminCallback(action="add_category").pack())
    builder.button(text="–¢–æ–≤–∞—Ä", callback_data=AdminCallback(action="add_product").pack())
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_home"))
    return builder.as_markup()

def dynamic_keyboard(items: list, context: dict = None):
    builder = InlineKeyboardBuilder()
    context = context or {}
    for item in items:
        # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ dict, item –±—É–¥–µ—Ç –∫–ª—é—á–æ–º
        display_text = item
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –∫–æ–ª–±—ç–∫–∞ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        item_context = context.copy()
        item_context['item'] = item # –û–±—â–∏–π –∫–ª—é—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        builder.button(text=display_text, callback_data=str(item)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–º—è –≤ –∫–æ–ª–±—ç–∫–µ –¥–ª—è FSM
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_home"))
    return builder.as_markup()


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.message(Command(ADMIN_PASSWORD))
async def admin_entry(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=get_admin_menu())

@dp.callback_query(F.data == "admin_home")
async def admin_home(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=get_admin_menu())

@dp.callback_query(AdminCallback.filter(F.action == "add_menu"))
async def admin_add_menu(callback: CallbackQuery):
    await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=get_add_menu())

# --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---

# –ì–æ—Ä–æ–¥
@dp.callback_query(AdminCallback.filter(F.action == "add_city"))
async def add_city_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminFSM.add_city)
    await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

@dp.message(AdminFSM.add_city)
async def add_city_finish(message: Message, state: FSMContext):
    data = load_data()
    data[message.text] = {}
    save_data(data)
    await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.callback_query(AdminCallback.filter(F.action == "add_category"))
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    data = load_data()
    if not data: return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥!", show_alert=True)
    await state.set_state(AdminFSM.add_category_city)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=dynamic_keyboard(list(data.keys())))

@dp.callback_query(AdminFSM.add_category_city)
async def add_category_city_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(city=callback.data)
    await state.set_state(AdminFSM.add_category_name)
    await callback.message.edit_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@dp.message(AdminFSM.add_category_name)
async def add_category_finish(message: Message, state: FSMContext):
    user_data = await state.get_data()
    city = user_data['city']
    data = load_data()
    data[city][message.text] = {}
    save_data(data)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{city}'.")
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())
    
# –¢–æ–≤–∞—Ä
@dp.callback_query(AdminCallback.filter(F.action == "add_product"))
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    data = load_data()
    if not data: return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥!", show_alert=True)
    await state.set_state(AdminFSM.add_product_city)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=dynamic_keyboard(list(data.keys())))

@dp.callback_query(AdminFSM.add_product_city)
async def add_product_city_selected(callback: CallbackQuery, state: FSMContext):
    city = callback.data
    data = load_data()
    if not data[city]: return await callback.message.edit_text("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ.", reply_markup=get_admin_menu())
    await state.update_data(city=city)
    await state.set_state(AdminFSM.add_product_category)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=dynamic_keyboard(list(data[city].keys())))

@dp.callback_query(AdminFSM.add_product_category)
async def add_product_category_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(category=callback.data)
    await state.set_state(AdminFSM.add_product_data)
    await callback.message.edit_text("üõí –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")

@dp.message(AdminFSM.add_product_data)
async def add_product_finish(message: Message, state: FSMContext):
    try:
        name, price_str = message.text.split(' - ')
        price = int(price_str)
    except (ValueError, TypeError):
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Netflix - 200).")
    
    user_data = await state.get_data()
    city, category = user_data['city'], user_data['category']
    data = load_data()
    data[city][category][name] = price
    save_data(data)
    
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())


# --- –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å ---
class ClientCallback(CallbackData, prefix="client"):
    level: str
    city: str | None = None
    category: str | None = None
    product: str | None = None

def client_keyboard(level: str, items_data, context: dict = None):
    builder = InlineKeyboardBuilder()
    context = context or {}
    items = items_data.keys()
    
    for item in items:
        display_text = item
        if level == 'product': display_text = f"{item} ‚Äî {items_data[item]}‚ÇΩ"
        
        cb_data = context.copy()
        cb_data.update({'level': level, level: item})
        builder.button(text=display_text, callback_data=ClientCallback(**cb_data).pack())
    
    builder.adjust(1)
    if level == 'category': builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≥–æ—Ä–æ–¥–∞–º", callback_data=ClientCallback(level='root').pack()))
    if level == 'product': builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=ClientCallback(level='city', city=context['city']).pack()))

    return builder.as_markup()

@dp.message(CommandStart())
async def client_start(message: Message):
    data = load_data()
    if not data: return await message.answer("–ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –ø—É—Å—Ç.")
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=client_keyboard('city', data))

@dp.callback_query(ClientCallback.filter())
async def client_nav(callback: CallbackQuery, callback_data: ClientCallback):
    data = load_data()
    level, city, category, product = callback_data.level, callback_data.city, callback_data.category, callback_data.product

    if level == 'root':
        await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=client_keyboard('city', data))
    elif level == 'city':
        await callback.message.edit_text(f"üìç –ì–æ—Ä–æ–¥: {city}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=client_keyboard('category', data[city], {'city': city}))
    elif level == 'category':
        await callback.message.edit_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=client_keyboard('product', data[city][category], {'city': city, 'category': category}))
    elif level == 'product':
        price = data[city][category][product]
        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=PAYMENT_LINK)
        builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_final")
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product} ‚Äî {price}‚ÇΩ\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=builder.as_markup())
    
    await callback.answer()

@dp.callback_query(F.data == "paid_final")
async def client_paid(callback: CallbackQuery):
    try:
        with open(PRODUCT_FILE, 'r', encoding='utf-8') as f: product_data = f.read()
        await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–æ–≤–∞—Ä:")
        await callback.message.answer(product_data)
    except FileNotFoundError: await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞.")
    await callback.answer()


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    asyncio.run(main())
