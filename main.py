import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
import json
import os
from datetime import datetime

BOT_TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
ADMIN_IDS = [5206914915]
ADMIN_PASSWORD = "admin25"
is_admin_logged = set()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

data_file = "data.json"
orders_file = "orders.txt"
products_file = "101.txt"

def load_data():
    if os.path.exists(data_file):
        with open(data_file, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(data_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥")],
            [KeyboardButton(text="üì¶ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")]
        ],
        resize_keyboard=True
    )

@dp.message()
async def handle_message(message: Message):
    text = message.text.strip()

    if text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

    elif text == "/admin":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

    elif text == ADMIN_PASSWORD:
        is_admin_logged.add(message.from_user.id)
        await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚úÖ", reply_markup=get_main_keyboard())

    elif text == "üì¶ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä":
        content = "üîπ –¢–ï–°–¢–û–í–ê–Ø –í–´–î–ê–ß–ê:"
        first = ""
        if os.path.exists(products_file):
            with open(products_file, "r", encoding="utf-8") as f:
                lines = f.readlines()
            if lines:
                first = lines[0].strip()
                content += f"\n{first}"
                with open(products_file, "w", encoding="utf-8") as f:
                    f.writelines(lines[1:])
            else:
                content += "\n–¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."
        else:
            content += "\n–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await message.answer(content)
        if first:
            with open(orders_file, "a", encoding="utf-8") as f:
                f.write(f"{datetime.now()} - {message.from_user.id} –ø–æ–ª—É—á–∏–ª: {first}\n")

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" and message.from_user.id in is_admin_logged:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /add –≤–∞—à_—Ç–æ–≤–∞—Ä")

    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä" and message.from_user.id in is_admin_logged:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑: /del –∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ")

    elif text.startswith("/add ") and message.from_user.id in is_admin_logged:
        item = text[5:].strip()
        if item:
            with open(products_file, "a", encoding="utf-8") as f:
                f.write(f"{item}\n")
            await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")

    elif text.startswith("/del ") and message.from_user.id in is_admin_logged:
        keyword = text[5:].strip()
        if os.path.exists(products_file):
            with open(products_file, "r", encoding="utf-8") as f:
                lines = f.readlines()
            lines = [line for line in lines if keyword not in line]
            with open(products_file, "w", encoding="utf-8") as f:
                f.writelines(lines)
            await message.answer("–¢–æ–≤–∞—Ä—ã —Å —Ç–∞–∫–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —É–¥–∞–ª–µ–Ω—ã ‚úÖ")

    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())