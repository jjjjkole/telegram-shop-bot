import asyncio
import logging
import os
import sqlite3

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
ADMIN_PASSWORD = "admin25"
DB_FILE = "shop.db"
PRODUCT_FILE = "101.txt"
PAYMENT_LINK = "https://visionary-hamster-5a495f.netlify.app/"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__) # <--- –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê, –ö–û–¢–û–†–£–Æ –Ø –í–ï–†–ù–£–õ
dp = Dispatcher()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î ---
def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('PRAGMA foreign_keys = ON')
        cursor.execute("CREATE TABLE IF NOT EXISTS cities (id INTEGER PRIMARY KEY, name TEXT UNIQUE NOT NULL)")
        cursor.execute("CREATE TABLE IF NOT EXISTS categories (id INTEGER PRIMARY KEY, name TEXT NOT NULL, city_id INTEGER NOT NULL, FOREIGN KEY (city_id) REFERENCES cities(id) ON DELETE CASCADE)")
        cursor.execute("CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY, name TEXT NOT NULL, price INTEGER NOT NULL, category_id INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE)")
        conn.commit()

def db_query(query, params=(), fetchone=False, fetchall=False, lastrowid=False):
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('PRAGMA foreign_keys = ON')
        cursor.execute(query, params)
        conn.commit()
        if fetchone: return cursor.fetchone()
        if fetchall: return cursor.fetchall()
        if lastrowid: return cursor.lastrowid

# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class AdminFSM(StatesGroup):
    add_name = State(); add_product_data = State()
    edit_name = State(); edit_product_data = State()

# --- CallbackData ---
class Nav(CallbackData, prefix="nav"):
    action: str; level: str; item_id: int | None = None
    city_id: int | None = None; category_id: int | None = None

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def create_admin_keyboard(level: str, items: list, action: str, parent_ctx: dict = None):
    builder = InlineKeyboardBuilder(); parent_ctx = parent_ctx or {}
    for item_id, name in items:
        display_text = name
        if level == "product":
            product_info = db_query("SELECT price FROM products WHERE id=?", (item_id,), fetchone=True)
            if product_info: display_text = f"{name} ‚Äî {product_info[0]}‚ÇΩ"
        
        cb_data = parent_ctx.copy(); cb_data.update({'action': action, 'level': level, 'item_id': item_id})
        builder.button(text=display_text, callback_data=Nav(**cb_data).pack())
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_home"))
    return builder.as_markup()

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.message(Command(ADMIN_PASSWORD))
async def admin_entry(message: Message, state: FSMContext):
    await state.clear(); await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardBuilder().add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add"), InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="delete"), InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")).adjust(3).as_markup())

@dp.callback_query(F.data == "admin_home")
async def admin_home(callback: CallbackQuery, state: FSMContext):
    await state.clear(); await callback.message.edit_text("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardBuilder().add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add"), InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="delete"), InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")).adjust(3).as_markup())

@dp.callback_query(F.data.in_({'add', 'delete', 'edit'}))
async def admin_action_menu(callback: CallbackQuery, state: FSMContext):
    action = callback.data
    text = {"add": "–¥–æ–±–∞–≤–∏—Ç—å", "delete": "—É–¥–∞–ª–∏—Ç—å", "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"}
    await state.update_data(action=action)
    await callback.message.edit_text(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ {text.get(action)}?", reply_markup=InlineKeyboardBuilder().add(InlineKeyboardButton(text="–ì–æ—Ä–æ–¥", callback_data=Nav(action=action, level='city').pack()), InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=Nav(action=action, level='category').pack()), InlineKeyboardButton(text="–¢–æ–≤–∞—Ä", callback_data=Nav(action=action, level='product').pack())).row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_home")).as_markup())

# --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ ---
@dp.callback_query(Nav.filter())
async def handle_admin_nav(callback: CallbackQuery, state: FSMContext, callback_data: Nav):
    action, level, item_id = callback_data.action, callback_data.level, callback_data.item_id
    city_id, category_id = callback_data.city_id, callback_data.category_id
    
    await state.update_data(action=action, level=level, item_id_to_edit=item_id, city_id=city_id, category_id=category_id)

    # --- –£–¥–∞–ª–µ–Ω–∏–µ ---
    if action == "delete":
        db_query(f"DELETE FROM {level}s WHERE id=?", (item_id,))
        await callback.message.edit_text(f"‚úÖ {level.capitalize()} —É–¥–∞–ª–µ–Ω.", reply_markup=InlineKeyboardBuilder().add(InlineKeyboardButton(text="–û–∫", callback_data="admin_home")).as_markup())
        return

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ ---
    items, text_prompt, parent_context = [], "", {}
    if level == "city": 
        items = db_query("SELECT id, name FROM cities", fetchall=True)
        text_prompt = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    elif level == "category": 
        items = db_query("SELECT id, name FROM categories WHERE city_id=?", (item_id,), fetchall=True)
        text_prompt = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        parent_context = {'city_id': item_id}
    elif level == "product": 
        items = db_query("SELECT id, name FROM products WHERE category_id=?", (item_id,), fetchall=True)
        text_prompt = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
        parent_context = {'city_id': city_id, 'category_id': item_id}
    
    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–¥–ª—è delete –∏ edit)
    if action in ["delete", "edit"]:
        if not items: return await callback.answer("–ó–¥–µ—Å—å –Ω–µ—á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
        await callback.message.edit_text(text_prompt, reply_markup=create_admin_keyboard(level, items, action, parent_context))
        return
        
    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if action == "add":
        if level == 'category': await state.update_data(item_id=item_id) # item_id –∑–¥–µ—Å—å —ç—Ç–æ city_id
        if level == 'product': await state.update_data(item_id=item_id) # item_id –∑–¥–µ—Å—å —ç—Ç–æ category_id
        
        if level == 'product':
            await state.set_state(AdminFSM.get_product_data); await callback.message.edit_text("üõí –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")
        else:
            await state.set_state(AdminFSM.get_name); await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è '{level}':")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM ---
@dp.message(AdminFSM.get_name)
async def fsm_get_name(message: Message, state: FSMContext):
    user_data = await state.get_data(); action, level = user_data['action'], user_data['level']
    if action == 'add':
        if level == 'city': db_query("INSERT INTO cities (name) VALUES (?)", (message.text,))
        elif level == 'category': db_query("INSERT INTO categories (name, city_id) VALUES (?,?)", (message.text, user_data['item_id']))
    elif action == 'edit':
        db_query(f"UPDATE {level}s SET name=? WHERE id=?", (message.text, user_data['item_id_to_edit']))
    
    await message.answer(f"‚úÖ {level.capitalize()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=InlineKeyboardBuilder().add(InlineKeyboardButton(text="–û–∫", callback_data="admin_home")).as_markup())
    await state.clear()

@dp.message(AdminFSM.get_product_data)
async def fsm_get_product(message: Message, state: FSMContext):
    user_data = await state.get_data(); action = user_data['action']
    try: name, price_str = message.text.split(' - '); price = int(price_str)
    except (ValueError, TypeError): return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Netflix - 200).")

    if action == 'add': db_query("INSERT INTO products (name, price, category_id) VALUES (?,?,?)", (name, price, user_data['item_id']))
    elif action == 'edit': db_query("UPDATE products SET name=?, price=? WHERE id=?", (name, price, user_data['item_id_to_edit']))
    
    await message.answer(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=InlineKeyboardBuilder().add(InlineKeyboardButton(text="–û–∫", callback_data="admin_home")).as_markup())
    await state.clear()

# --- –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å ---
def create_client_keyboard(level: str, items: list, parent_ctx: dict = None):
    builder = InlineKeyboardBuilder(); parent_ctx = parent_ctx or {}
    for item_id, name in items:
        display_text = name
        if level == "product":
            product_info = db_query("SELECT price FROM products WHERE id=?", (item_id,), fetchone=True)
            if product_info: display_text = f"{name} ‚Äî {product_info[0]}‚ÇΩ"
        
        cb_data = parent_ctx.copy(); cb_data.update({'level': level, 'item_id': item_id})
        builder.button(text=display_text, callback_data=ClientNav(**cb_data).pack())
    builder.adjust(1)
    if level == 'category': builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≥–æ—Ä–æ–¥–∞–º", callback_data=ClientNav(level='root').pack()))
    if level == 'product': builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=ClientNav(level='city', item_id=parent_ctx['city_id']).pack()))
    return builder.as_markup()

@dp.message(CommandStart())
async def client_start(message: Message):
    cities = db_query("SELECT id, name FROM cities", fetchall=True)
    if not cities: return await message.answer("–ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –ø—É—Å—Ç.")
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=create_client_keyboard('city', cities))

@dp.callback_query(ClientNav.filter())
async def client_nav(callback: CallbackQuery, callback_data: ClientNav):
    level, item_id = callback_data.level, callback_data.item_id
    city_id, category_id = callback_data.city_id, callback_data.category_id

    if level == 'root':
        await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=create_client_keyboard('city', db_query("SELECT id, name FROM cities", fetchall=True)))
    elif level == 'city':
        city_name = db_query("SELECT name FROM cities WHERE id=?", (item_id,), fetchone=True)[0]
        await callback.message.edit_text(f"üìç –ì–æ—Ä–æ–¥: {city_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=create_client_keyboard('category', db_query("SELECT id, name FROM categories WHERE city_id=?", (item_id,), fetchall=True), {'city_id': item_id}))
    elif level == 'category':
        category_name = db_query("SELECT name FROM categories WHERE id=?", (item_id,), fetchone=True)[0]
        await callback.message.edit_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=create_client_keyboard('product', db_query("SELECT id, name FROM products WHERE category_id=?", (item_id,), fetchall=True), {'city_id': city_id, 'category_id': item_id}))
    elif level == 'product':
        product_name, price = db_query("SELECT name, price FROM products WHERE id=?", (item_id,), fetchone=True)
        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=PAYMENT_LINK); builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_final")
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product_name} ‚Äî {price}‚ÇΩ\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "paid_final")
async def client_paid(callback: CallbackQuery):
    try:
        with open(PRODUCT_FILE, 'r', encoding='utf-8') as f: product_data = f.read()
        await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–æ–≤–∞—Ä:"); await callback.message.answer(product_data)
    except FileNotFoundError: await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞.")
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    init_db()
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (v. SQLite)..."); asyncio.run(main())
