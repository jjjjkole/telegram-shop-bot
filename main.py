import asyncio
import json
import logging
import os
from contextlib import suppress

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
# –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
ADMIN_PASSWORD = "admin25"


# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"
PRODUCT_FILE = "101.txt"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —É—Ç–∏–ª–∏—Ç—ã ---
PAYMENT_LINK = "https://example.com/payment_landing"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON —Ñ–∞–π–ª–æ–º
def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'w', encoding='utf-8') as f: json.dump({}, f)
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            return json.loads(content) if content else {}
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ data.json: {e}"); return {}

def save_data(data):
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f: json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ data.json: {e}")

# --- FSM (–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π) ---
class AdminStates(StatesGroup):
    add_city_name = State()
    add_category_select_city = State()
    add_category_name = State()
    add_product_select_city = State()
    add_product_select_category = State()
    add_product_data = State()
    delete_city_select = State()
    delete_category_select_city = State()
    delete_category_select = State()
    delete_product_select_city = State()
    delete_product_select_category = State()
    delete_product_select = State()

class NavCallback(CallbackData, prefix="nav"):
    action: str; level: str; city: str | None = None; category: str | None = None

dp = Dispatcher()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_admin_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=NavCallback(action='add', level='city').pack())
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=NavCallback(action='delete', level='city').pack())
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=NavCallback(action='add', level='category').pack())
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=NavCallback(action='delete', level='category').pack())
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=NavCallback(action='add', level='product').pack())
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=NavCallback(action='delete', level='product').pack())
    builder.adjust(2)
    return builder.as_markup()

def build_keyboard(level: str, data, parent_info: dict = None):
    builder = InlineKeyboardBuilder()
    action = parent_info.get('action', 'select') if parent_info else 'select'
    
    items = data.keys() if isinstance(data, dict) else []

    for item in items:
        # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É
        display_text = item
        if level == 'product':
            display_text = f"{item} ‚Äî {data[item]}‚ÇΩ"
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–±—ç–∫–∞
        callback_data = parent_info.copy() if parent_info else {}
        callback_data['action'] = action
        callback_data['level'] = level
        callback_data[level] = item
        
        builder.button(text=display_text, callback_data=NavCallback(**callback_data).pack())
    
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if level == 'category':
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data=NavCallback(action='back', level='to_cities').pack()))
    elif level == 'product':
        back_data = parent_info.copy()
        back_data['action'] = 'select'
        back_data['level'] = 'category'
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=NavCallback(**back_data).pack()))
    
    return builder.as_markup()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def edit_or_send_message(target, text: str, markup=None):
    if isinstance(target, CallbackQuery):
        await target.message.edit_text(text, reply_markup=markup)
        await target.answer()
    else:
        await target.answer(text, reply_markup=markup)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@dp.message(Command(ADMIN_PASSWORD))
async def admin_login(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())

# --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
@dp.callback_query(NavCallback.filter(F.action == 'add'))
async def handle_add_action(callback: CallbackQuery, state: FSMContext, callback_data: NavCallback):
    await callback.message.delete()
    level = callback_data.level
    if level == 'city':
        await state.set_state(AdminStates.add_city_name)
        await callback.message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    elif level == 'category':
        await state.set_state(AdminStates.add_category_select_city)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=build_keyboard('city', load_data()))
    elif level == 'product':
        await state.set_state(AdminStates.add_product_select_city)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=build_keyboard('city', load_data()))

@dp.message(AdminStates.add_city_name)
async def process_add_city(message: Message, state: FSMContext):
    data = load_data()
    data[message.text] = {}
    save_data(data)
    await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())

@dp.callback_query(NavCallback.filter(F.level == 'city'), AdminStates.add_category_select_city)
async def process_add_category_city(callback: CallbackQuery, state: FSMContext, callback_data: NavCallback):
    await state.update_data(city=callback_data.city)
    await state.set_state(AdminStates.add_category_name)
    await callback.message.edit_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@dp.message(AdminStates.add_category_name)
async def process_add_category_name(message: Message, state: FSMContext):
    user_data = await state.get_data()
    city = user_data['city']
    data = load_data()
    data[city][message.text] = {}
    save_data(data)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–æ—Ä–æ–¥ '{city}'.")
    await state.clear()
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())

# ... (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ---
@dp.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    data = load_data()
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=build_keyboard('city', data))

@dp.callback_query(NavCallback.filter(F.action == 'select'))
async def navigate(callback: CallbackQuery, callback_data: NavCallback):
    data = load_data()
    level = callback_data.level
    
    if level == 'city':
        city = callback_data.city
        await edit_or_send_message(callback, f"üìç –ì–æ—Ä–æ–¥: {city}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                   reply_markup=build_keyboard('category', data[city], parent_info={'city': city}))
    
    elif level == 'category':
        city = callback_data.city
        category = callback_data.category
        await edit_or_send_message(callback, f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                                   reply_markup=build_keyboard('product', data[city][category], parent_info={'city': city, 'category': category}))
    
    elif level == 'product':
        # –õ–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã
        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=PAYMENT_LINK)
        builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")
        await edit_or_send_message(callback, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", builder.as_markup())

@dp.callback_query(F.data == "paid")
async def handle_paid(callback: CallbackQuery):
    await edit_or_send_message(callback, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–æ–≤–∞—Ä:")
    try:
        with open(PRODUCT_FILE, 'r', encoding='utf-8') as f:
            product_data = f.read()
        await callback.message.answer(product_data)
    except FileNotFoundError:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞.")

@dp.callback_query(NavCallback.filter(F.action == 'back' and F.level == 'to_cities'))
async def back_to_cities(callback: CallbackQuery):
    await edit_or_send_message(callback, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", 
                               reply_markup=build_keyboard('city', load_data()))

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."); asyncio.run(main())
