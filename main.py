import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
import json
import os
from datetime import datetime

BOT_TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
ADMIN_IDS = [5206914915]

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

data_file = "data.json"
orders_file = "orders.txt"
products_file = "101.txt"

def load_data():
    if os.path.exists(data_file):
        with open(data_file, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"cities": {}, "current": {}}

def save_data(data):
    with open(data_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥"))
    kb.add(KeyboardButton("üì¶ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"))
    kb.add(KeyboardButton("üåÜ –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"), KeyboardButton("üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"))
    return kb

def get_city_keyboard(data):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for city in data.get("cities", {}):
        kb.add(KeyboardButton(city))
    return kb

def get_category_keyboard(data, city):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    categories = data.get("cities", {}).get(city, {})
    for category in categories:
        kb.add(KeyboardButton(category))
    return kb

def get_product_keyboard(data, city, category):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    products = data.get("cities", {}).get(city, {}).get(category, [])
    for product in products:
        kb.add(KeyboardButton(product))
    return kb

@dp.message()
async def handle_message(message: Message):
    text = message.text.strip()
    data = load_data()

    if text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

    elif text == "üõí –ö–∞—Ç–∞–ª–æ–≥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard(data))

    elif text in data.get("cities", {}):
        data["current"][str(message.from_user.id)] = {"city": text}
        save_data(data)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_keyboard(data, text))

    elif any(text in data.get("cities", {}).get(user_data.get("city", ""), {}) for user_data in [data.get("current", {}).get(str(message.from_user.id), {})]):
        user_data = data["current"].get(str(message.from_user.id), {})
        user_data["category"] = text
        data["current"][str(message.from_user.id)] = user_data
        save_data(data)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=get_product_keyboard(data, user_data["city"], text))

    elif text == "üì¶ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä":
        content = "üîπ –¢–ï–°–¢–û–í–ê–Ø –í–´–î–ê–ß–ê:\n"
        first = ""
        if os.path.exists(products_file):
            with open(products_file, "r", encoding="utf-8") as f:
                lines = f.readlines()
            if lines:
                first = lines[0].strip()
                content += f"\n{first}"
                with open(products_file, "w", encoding="utf-8") as f:
                    f.writelines(lines[1:])
            else:
                content += "\n–¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."
        else:
            content += "\n–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await message.answer(content)
        if first:
            with open(orders_file, "a", encoding="utf-8") as f:
                f.write(f"{datetime.now()} - {message.from_user.id} –ø–æ–ª—É—á–∏–ª: {first}\n")

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" and message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /add –≤–∞—à_—Ç–æ–≤–∞—Ä")

    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä" and message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑: /del –∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ")

    elif text == "üåÜ –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥" and message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /addcity –Ω–∞–∑–≤–∞–Ω–∏–µ")

    elif text == "üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" and message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /addcat –Ω–∞–∑–≤–∞–Ω–∏–µ")

    elif text.startswith("/addcity ") and message.from_user.id in ADMIN_IDS:
        city = text[9:].strip()
        if city:
            data["cities"].setdefault(city, {})
            save_data(data)
            await message.answer(f"–ì–æ—Ä–æ–¥ '{city}' –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")

    elif text.startswith("/addcat ") and message.from_user.id in ADMIN_IDS:
        user_data = data.get("current", {}).get(str(message.from_user.id), {})
        city = user_data.get("city")
        if city:
            category = text[8:].strip()
            data["cities"].setdefault(city, {}).setdefault(category, [])
            save_data(data)
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–æ—Ä–æ–¥ '{city}' ‚úÖ")
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –≤ /–∫–∞—Ç–∞–ª–æ–≥–µ")

    elif text.startswith("/add ") and message.from_user.id in ADMIN_IDS:
        item = text[5:].strip()
        user_data = data.get("current", {}).get(str(message.from_user.id), {})
        city = user_data.get("city")
        category = user_data.get("category")
        if city and category and item:
            data["cities"].setdefault(city, {}).setdefault(category, []).append(item)
            save_data(data)
            await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚úÖ")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏ —Å–Ω–∞—á–∞–ª–∞ –≥–æ—Ä–æ–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

    elif text.startswith("/del ") and message.from_user.id in ADMIN_IDS:
        keyword = text[5:].strip()
        if os.path.exists(products_file):
            with open(products_file, "r", encoding="utf-8") as f:
                lines = f.readlines()
            lines = [line for line in lines if keyword not in line]
            with open(products_file, "w", encoding="utf-8") as f:
                f.writelines(lines)
            await message.answer("–¢–æ–≤–∞—Ä—ã —Å —Ç–∞–∫–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —É–¥–∞–ª–µ–Ω—ã ‚úÖ")

    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
