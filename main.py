
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncio
import json
import os

BOT_TOKEN = "7710092707:AAH_Ae_pXuaFeePDgkm0zS8KfA3_GBz6H9w"
ADMIN_IDS = [5206914915]
ADMIN_PASSWORD = "admin25"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
data_file = "data.json"

def load_data():
    if os.path.exists(data_file):
        with open(data_file, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"products": [], "cities": [], "categories": []}

def save_data(data):
    with open(data_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_main_keyboard(is_admin=False):
    builder = ReplyKeyboardBuilder()
    builder.button(text="üõí –ö–∞—Ç–∞–ª–æ–≥")
    if is_admin:
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
        builder.button(text="üèôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
        builder.button(text="üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    is_admin = message.from_user.id in ADMIN_IDS
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard(is_admin))

@dp.message(lambda msg: msg.text == "üõí –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_handler(message: types.Message):
    data = load_data()
    if not data["products"]:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return
    content = "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n"
    for item in data["products"]:
        content += f"- {item['name']} ({item['price']}‚ÇΩ)\n"
    await message.answer(content)

@dp.message(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def ask_add_product(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")

@dp.message(lambda msg: "-" in msg.text and msg.from_user.id in ADMIN_IDS)
async def add_product(message: types.Message):
    data = load_data()
    try:
        name, price = map(str.strip, message.text.split("-"))
        price = int(price)
        data["products"].append({"name": name, "price": price})
        save_data(data)
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
